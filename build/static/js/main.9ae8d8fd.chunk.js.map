{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","getu","url","a","get","response","myData","data","display","message","text","stateModule","changeState","console","error","state","pub","newstate","App","props","handleChange","event","setState","target","name","value","checkFields","handleSubmit","e","preventDefault","handlechange","displayid","currenttime","Date","toLocaleString","slice","senttime","displaylink","setInterval","test","getState","undefined","this","intervalID","tick","className","onSubmit","onChange","placeholder","type","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mSAGMA,G,MAAQC,EAAQ,KAEZC,EAAI,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,+EAEcJ,EAAMK,IAAIF,GAFxB,OAEHG,EAFG,OAGFC,EAASA,EAASD,EAASE,KAAKC,QAAQC,QAAQC,KACrDC,EAAYC,YAAYN,GAJjB,gDAMTO,QAAQC,MAAR,MANS,yDAAH,sDAUNH,EAAe,WACjB,IAAII,EAEAC,EAAM,CAEVA,YAAkB,SAAUC,GACxBF,EAAQE,GAGZD,SAAe,WACX,OAAOD,IAGX,OAAOC,EAbU,GA+IRE,E,kDAxHb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAYRC,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,OAClC,EAAKC,cAhBS,EAqElBC,aAAa,SAACC,GACZA,EAAEC,kBAtEc,EAyElBC,aAAa,SAACF,GACZ,EAAKN,SAAS,CAACS,UAAUH,EAAEL,OAAOE,SAxElC,EAAKV,MAAM,CACTL,KAAM,GACNsB,aAAY,IAAIC,MAAOC,iBAAiBC,MAAM,IAC9CC,SAAS,GACTC,YAAY,iDACZN,UAAU,IAPI,E,iEAoBC,IAAD,OACpBO,aAAY,WACVrC,EAAK,EAAKc,MAAMsB,YAAc,EAAKtB,MAAMgB,WACzC,IAAIQ,EAAO5B,EAAY6B,WAEvB,GAAGD,IAAO,EAAKxB,MAAML,WAAe+B,IAARF,EAAkB,CAC5C,IAAIlB,EAAQ,CACVE,OAAQ,CACNC,KAAM,WACNC,OAAO,IAAIQ,MAAOC,iBAAiBC,MAAM,MAG7C,EAAKf,aAAaC,GAGhBA,EAAQ,CACVE,OAAQ,CACNC,KAAM,OACNC,MAAOc,IAGX,EAAKnB,aAAaC,KACjB,O,0CAGiB,IAAD,OACjBqB,KAAKC,WAAaL,aAChB,kBAAM,EAAKM,SACX,O,6BAIA,IAAIvB,EAAQ,CACVE,OAAQ,CACNC,KAAM,cACNC,OAAO,IAAIQ,MAAOC,iBAAiBC,MAAM,MAG7CO,KAAKtB,aAAaC,K,+BAsBpB,OACE,yBAAKwB,UAAU,OACb,4BAAQA,UAAU,cAGlB,yBAAKA,UAAU,aAEL,+CACA,0BAAMA,UAAW,aAAaC,SAAUJ,KAAKf,cACzC,2BAAQoB,SAAYL,KAAKZ,aACrBL,MAAOiB,KAAK3B,MAAMgB,UAClBiB,YAAY,WACZC,KAAK,WAOrB,yBAAKJ,UAAU,UACf,yBAAKA,UAAY,SACf,uCACF,yBAAKK,GAAG,QAAQR,KAAK3B,MAAML,OAE3B,yBAAKmC,UAAY,gBACjB,2CACE,yBAAKK,GAAG,IAAIR,KAAK3B,MAAMiB,cAGzB,yBAAKa,UAAY,aACjB,wCACE,yBAAKK,GAAG,IAAIR,KAAK3B,MAAMqB,kB,GAhHfe,aCzBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLD,QAAQC,MAAMA,EAAML,c","file":"static/js/main.9ae8d8fd.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nconst axios = require('axios');\n/*const url = 'https://iot-display.herokuapp.com/display/get/5e8c8382c5c0f600242851f4';*/\n    const getu = async url => {\n      try {\n        const response = await axios.get(url);\n          var  myData = myData = response.data.display.message.text;\n          stateModule.changeState(myData)\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    var stateModule = (function () {\n      var state; // Private Variable\n    \n      var pub = {};// public object - returned at end of module\n    \n      pub.changeState = function (newstate) {\n          state = newstate;\n      };\n    \n      pub.getState = function() {\n          return state;\n      }\n    \n      return pub; // expose externally\n    }());\n    \n\n\n\n\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      text: \"\",\n      currenttime:new Date().toLocaleString().slice(12.0),\n      senttime:\"\",\n      displaylink:\"https://iot-display.herokuapp.com/display/get/\",\n      displayid:\"\"\n      \n    }\n  }\n\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    },this.checkFields);\n  };\n\n\ncomponentWillMount(){\nsetInterval(() => {\n  getu(this.state.displaylink + this.state.displayid)\n  var test = stateModule.getState();\n \n  if(test!==this.state.text&& test!== undefined){\n    var event = {\n      target: {\n        name: \"senttime\",\n        value: new Date().toLocaleString().slice(12.0)\n      }\n    };\n    this.handleChange(event)\n  }\n\n  var event = {\n    target: {\n      name: \"text\",\n      value: test\n    }\n  };\n  this.handleChange(event)\n}, 10000);}\n\n  \ncomponentDidMount(){\n  this.intervalID = setInterval(\n    () => this.tick(),\n    1000\n  );\n}\n  tick() {\n    var event = {\n      target: {\n        name: \"currenttime\",\n        value: new Date().toLocaleString().slice(12.0)\n      }\n    };\n    this.handleChange(event)\n\n  }\n\n\n\n\n\n\n\n\n  handleSubmit=(e)=>{\n    e.preventDefault();\n}\n\n  handlechange=(e)=>{\n    this.setState({displayid:e.target.value})\n\n}\n    \nrender(){\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n\n      <div className=\"joingroup\">\n                \n                <h5>Enter Diplay ID</h5>\n                <form className =\"group-form\" onSubmit={this.handleSubmit}>\n                    <input  onChange ={ this.handlechange} \n                        value={this.state.displayid}\n                        placeholder=\"Enter ID\"\n                        type=\"text\"/>\n                         </form>\n            </div>\n\n\n\n\n        <div className=\"screen\">\n        <div className = \"text \">\n          <p>Message:</p> \n        <div id=\"text\">{this.state.text}</div>\n        </div>\n        <div className = \"currenttime \">\n        <p>Current Time</p> \n          <div id=\"\">{this.state.currenttime}\n          </div>\n          </div>\n        <div className = \"senttime \">\n        <p>Sent Time</p> \n          <div id=\"\">{this.state.senttime}\n          </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}